/* Copyright (c) 2011-2012, The Linux Foundation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimer in the documentation and/or other materials provided
 *       with the distribution.
 *     * Neither the name of The Linux Foundation, nor the names of its
 *       contributors may be used to endorse or promote products derived
 *       from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
 * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
/* LOC_API TOOL VERSION: 4.48 */
/* GENERATED: TUE JUN 14 2011 */
/*=============================================================================
                             L O C _ A P I . X D R

GENERAL DESCRIPTION
  This is an AUTO GENERATED file that provides an xdr compatible definition of
  the loc_api API.

  ---------------------------------------------------------------------------


  ---------------------------------------------------------------------------
=============================================================================*/

/*=============================================================================

                              Edit History

                             AUTO GENERATED

Generated by following versions of Htorpc modules:
Id: //source/qcom/qct/core/mproc/tools/rel/2h09/htorpc/htorpc.pl#1
Id: //source/qcom/qct/core/mproc/tools/rel/2h09/htorpc/lib/Htorpc/Start.pm#1
Id: //source/qcom/qct/core/mproc/tools/rel/2h09/htorpc/lib/Htorpc/Htoxdr.pm#1
Id: //source/qcom/qct/core/mproc/tools/rel/2h09/htorpc/lib/Htorpc/XDR.pm#3
Id: //source/qcom/qct/core/mproc/tools/rel/2h09/htorpc/lib/Htorpc/Output.pm#5
Id: //source/qcom/qct/core/mproc/tools/rel/2h09/htorpc/lib/Htorpc/Parser.pm#1
Id: //source/qcom/qct/core/mproc/tools/rel/2h09/htorpc/lib/Htorpc/Metacomments.pm#1
Id: //source/qcom/qct/core/mproc/tools/rel/2h09/htorpc/lib/Htorpc/SymbolTable.pm#1

loc_api Definition File(s):
Id: //source/qcom/qct/modem/api/gps/main/latest/loc_api.h#24
=============================================================================*/
/*=============================================================================
$Header$
=============================================================================*/



typedef rpc_uint32 rpc_loc_api_api_versions_return_type<>;

/*
 * Declare an rpc_uint32 type for each callback type in the API
 */
typedef rpc_uint32 rpc_loc_event_cb_f_type;



/*
 * These are struct declarations for the function arguments
 */

struct rpc_loc_open_args {
  rpc_loc_event_mask_type event_reg_mask;
  rpc_loc_event_cb_f_type event_callback;
};

struct rpc_loc_close_args {
  rpc_loc_client_handle_type handle;
};

struct rpc_loc_start_fix_args {
  rpc_loc_client_handle_type handle;
};

struct rpc_loc_stop_fix_args {
  rpc_loc_client_handle_type handle;
};

struct rpc_loc_ioctl_args {
  rpc_loc_client_handle_type handle;
  rpc_loc_ioctl_e_type ioctl_type;
  rpc_loc_ioctl_data_u_type *ioctl_data;
};



struct rpc_loc_api_api_version_s_args {
  rpc_boolean len_not_null;
};

/*
 * These are struct declarations for the function results
 */

struct rpc_loc_api_rpc_glue_code_info_remote_rets {
  rpc_uint32 toolvers;   /* Tool version */
  rpc_uint32 features;   /* Features turned on in the code.
                          * 0x00000001    ONCRPC Server Cleanup Support
                          */
  rpc_uint32 proghash;   /* Unique hash value for the API XDR definition */
  rpc_uint32 cbproghash; /* Unique hash value for the Callbacks' XDR definition */
};

struct rpc_loc_open_rets {
  rpc_loc_client_handle_type loc_open_result;
};

struct rpc_loc_close_rets {
  rpc_int32 loc_close_result;
};

struct rpc_loc_start_fix_rets {
  rpc_int32 loc_start_fix_result;
};

struct rpc_loc_stop_fix_rets {
  rpc_int32 loc_stop_fix_result;
};

struct rpc_loc_ioctl_rets {
  rpc_int32 loc_ioctl_result;
};

 struct rpc_loc_api_api_versions_rets {
  rpc_loc_api_api_versions_return_type loc_api_api_versions_result;
  rpc_uint32 *len;
};

/*
 * XDR definition of the LOC_API program ( vers. 0x00050006 )
 */

program LOC_APIPROG {
  version LOC_APIVERS_0001 {

	void
		rpc_loc_api_null( void ) = 0;

	rpc_loc_api_rpc_glue_code_info_remote_rets
		rpc_loc_api_rpc_glue_code_info_remote( void ) = 1;

	rpc_loc_open_rets
		rpc_loc_open( rpc_loc_open_args ) = 2;

	rpc_loc_close_rets
		rpc_loc_close( rpc_loc_close_args ) = 3;

	rpc_loc_start_fix_rets
		rpc_loc_start_fix( rpc_loc_start_fix_args ) = 4;

	rpc_loc_stop_fix_rets
		rpc_loc_stop_fix( rpc_loc_stop_fix_args ) = 5;

	rpc_loc_ioctl_rets
		rpc_loc_ioctl( rpc_loc_ioctl_args ) = 6;

	rpc_loc_api_api_versions_rets
		rpc_loc_api_api_versions( void ) = 0xFFFFFFFF;




  } = 0x00050001;

version LOC_APIVERS_0002 {

/* Following elements added in enum rpc_loc_assist_data_request_e_type in 0x00050002
RPC_LOC_ASSIST_DATA_POSITION_INJECTION_REQ
*/
/* Following elements added in enum rpc_loc_ioctl_e_type in 0x00050002
RPC_LOC_IOCTL_GET_XTRA_T_SESSION_CONTROL
RPC_LOC_IOCTL_RESERVED_CMD
RPC_LOC_IOCTL_SET_XTRA_T_SESSION_CONTROL
*/

	void
	rpc_loc_api_null( void ) = 0;

      } = 0x00050002;

version LOC_APIVERS_0003 {

/* Following elements added in enum rpc_loc_ioctl_e_type in 0x00050003
RPC_LOC_IOCTL_SET_DATA_ENABLE
RPC_LOC_IOCTL_SET_LBS_APN_PROFILE
RPC_LOC_IOCTL_GET_XTRA_APN_PROFILE
RPC_LOC_IOCTL_GET_LBS_APN_PROFILE
RPC_LOC_IOCTL_SET_XTRA_APN_PROFILE
*/

	void
	rpc_loc_api_null( void ) = 0;

      } = 0x00050003;

version LOC_APIVERS_0004 {

/* Following elements added in enum rpc_loc_ioctl_e_type in 0x00050004
RPC_LOC_IOCTL_GET_SUPL_VERSION
RPC_LOC_IOCTL_SET_SUPL_VERSION
*/

	void
	rpc_loc_api_null( void ) = 0;

      } = 0x00050004;

version LOC_APIVERS_0005 {

/* Following elements added in enum rpc_loc_server_addr_e_type in 0x00050005
RPC_LOC_SERVER_ADDR_IPV6
*/
/* Following elements added in enum rpc_loc_ioctl_e_type in 0x00050005
RPC_LOC_IOCTL_ERROR_ESTIMATE_CONFIG
*/

	void
	rpc_loc_api_null( void ) = 0;

      } = 0x00050005;



    version LOC_APIVERS_0006 {

/* Following elements added in enum rpc_loc_ioctl_e_type in 0x00050006
RPC_LOC_IOCTL_INFORM_SERVER_MULTI_OPEN_STATUS
*/
/* Following elements added in enum rpc_loc_server_request_e_type in 0x00050006
RPC_LOC_SERVER_REQUEST_MULTI_OPEN
*/

	void
	rpc_loc_api_null( void ) = 0;

      } = 0x00050006;


} = 0x3000008C;

const LOC_APIVERS = 0x00050006;
